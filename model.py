# -*- coding: utf-8 -*-
"""3K2X.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1imlMQVqhI0oit9hFxU47HwIERF7mgkcN
"""

import matplotlib.pyplot as plt
import numpy as np
import PIL
import tensorflow as tf
import os
import cv2
import joblib
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential
from PIL import Image

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x
#tf library for deep learning
device_name = tf.test.gpu_device_name()

device_name = tf.test.gpu_device_name()

if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found')

print('Found GPU at: {}'.format(device_name))

from google.colab import drive
drive.mount('/content/drive')

train_dir = '/content/drive/MyDrive/final project/data reservoir/output/train'
test_dir ='/content/drive/MyDrive/final project/data reservoir/output/test'

import cv2
image = cv2.imread("/content/drive/MyDrive/final project/data reservoir/output/train/class B, (-) bilaterally or unilaterally/abul (1).jpg")

import matplotlib.pyplot as plt   #matplotlib is good for map and chart
plt.imshow(image)

# ပုံတွေရဲ့ Range  ကို scale လုပ်တာ။
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# All images will be rescaled by 1./255.
datagen_train = ImageDataGenerator(rescale=1.0/255,
                                   #width_shift_range=0.1,  #Random horizontal translation
                                   #height_shift_range=0.1,   #Random vertical translation
                                   #zoom_range = 0.2,
                                   #brightness_range = (0.5,1.5),
                                   #rotation_range=5,  #Random rotation (degrees)
                                   fill_mode='nearest'
                                   )

datagen_test = ImageDataGenerator(rescale=1.0/255,)

batch_size = 10
train_set = datagen_train.flow_from_directory(
                                              train_dir,
                                              target_size=(224, 224),
                                              batch_size=batch_size,
                                              color_mode='grayscale',
                                              class_mode="categorical",
                                              shuffle=True)
test_set = datagen_test.flow_from_directory(
                                            test_dir,
                                            target_size=(224, 224),
                                            batch_size=batch_size,
                                            color_mode='grayscale',
                                            class_mode="categorical",
                                            shuffle=False)

no_images = train_set.samples
print(no_images)

import tensorflow as tf
input_shape = (224, 224, 1)

model = tf.keras.models.Sequential([
                                    tf.keras.layers.Conv2D(64, (3, 3), activation='relu', input_shape=input_shape),
                                    tf.keras.layers.MaxPooling2D(2, 2),
                                    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
                                    tf.keras.layers.MaxPooling2D(2, 2),
                                    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
                                    tf.keras.layers.MaxPooling2D(2, 2),
                                    tf.keras.layers.Flatten(),
                                    tf.keras.layers.Dense(1000, activation='relu'),
                                    tf.keras.layers.Dense(1200, activation='relu'),
                                    tf.keras.layers.Dense(2, activation='softmax')])

model.compile(optimizer='adam',   #result ပိုေကာင်းအောင်ထည့်တာ
              loss = 'categorical_crossentropy',
              metrics =['acc'])   #accuracy

model.summary()

# Data Training
#num_of_training_images mharကိုယ့်ရဲ့ training data ပုံအရေအတွက် ပြောင်းဖို့မမေ့ပါနဲ့

num_of_training_images = no_images
history = model.fit(train_set,
                    steps_per_epoch=num_of_training_images//batch_size,  #epoch (run တဲ့အကြိမ်အရေအတွက်) တခုမှာ ၁၅ကြိမ်သွားမယ်
                    epochs=20,                   #count of runnning
                    verbose = 2,
                    shuffle = False)  #data တွေကို random/shuffle လုပ်ပြီး run

import matplotlib.pyplot as plt
acc = history.history['acc']

loss = history.history['loss']

# Assuming you have recorded accuracy and loss for 10 epochs
epochs_range = range(1, 11)

# Your code for plotting training accuracy and loss
plt.figure(figsize=(8, 4))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.legend(loc='lower right')
plt.title('Training Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.legend(loc='upper right')
plt.title('Training Loss')
plt.show()

# Class Labels
class_dictionary = test_set.class_indices
print('Labels dictionary',class_dictionary)  #evaluation စမ်းရင် unseen testing data နဲ့စမ်း

y_predicted = model.predict(test_set) # A way to predict data

y_pred = []
for i in  y_predicted:
  print(i)
  print(np.argmax(i))
  print()
  y_pred.append(np.argmax(i))

y_test = test_set.classes.tolist()

#Confusion Matrix
from sklearn.metrics import confusion_matrix
confusion_matrix = confusion_matrix(y_test,y_pred)
print('confusion_matrix')
print(confusion_matrix)

from sklearn.metrics import accuracy_score, precision_score, f1_score, recall_score

print('Accuracy Score',accuracy_score(y_test,y_pred)*100,'%')
print('Precision Macro Score ',precision_score(y_test,y_pred,average = 'macro')*100,'%')
print('Recall_Score',recall_score(y_test,y_pred, average = 'macro')*100,'%')
print('F1_Score',f1_score(y_test,y_pred, average = 'macro')*100,'%')

model.save('my_model4.h5')

"""# Demo"""

joblib.dump(model, '3K2X.dat')
print('Model saved : {}'.format('3K2X.dat'))

filename = "/content/noi.jpg"

image = cv2.imread(filename)
print(image.shape)
image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

image = cv2.resize(image,(200,100))
#image = np.expand_dims(image, axis=0)
image = np.expand_dims([image], axis=-1)
print(image.shape)
#image = np.transpose(image, (0, 2, 1, 3))
#model = joblib.load('/content/epoch-50_2508.dat')
model = tf.keras.models.load_model('/content/final_project.h5')
pred = model.predict(image)
print(pred)